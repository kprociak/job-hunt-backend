<?php

namespace Tests\Feature;

use Database\Seeders\TestSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class AuthControllerTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(TestSeeder::class);
    }

    public function testLoginMethodReturnsErrorThenNoEmailProvided()
    {
        $response = $this->postJson('/api/login', [
            'email' => '',
            'password' => 'password1234',
        ]);

        $response->assertStatus(422);
    }

    public function testLoginMethodReturnsErrorThenNoPasswordProvided()
    {
        $response = $this->postJson('/api/login', [
            'email' => 'test@test.com',
            'password' => '',
        ]);

        $response->assertStatus(422);
    }

    public function testLoginMethodReturnsErrorForNonExistingUser()
    {
        $response = $this->postJson('/api/login', [
            'email' => 'nouser@test.dev',
            'password' => 'password1234',
        ]);

        $response->assertStatus(401);
    }

    public function testLoginMethodReturnsErrorForIncorrectPassword()
    {
        $response = $this->postJson('/api/login', [
            'email' => 'test@example.dev',
            'password' => 'password12345',
        ]);

        $response->assertStatus(401);
    }

    public function testLoginMethodReturnsTokenForExistingUser()
    {
        $response = $this->postJson('/api/login', [
            'email' => 'test@example.dev',
            'password' => 'password1234',
        ]);

        $response->assertStatus(200)
            ->assertJsonStructure([
                'access_token',
                'token_type',
        ]);
    }

    public function testRegisterMethodReturnsErrorThenNoNameProvided()
    {
        $response = $this->postJson('/api/register', [
            'name' => '',
            'email' => 'test1@example.dev',
            'password' => 'password1234',
        ]);

        $response->assertStatus(422);
    }

    public function testRegisterMethodReturnsErrorThenNoEmailProvided()
    {
        $response = $this->postJson('/api/register', [
            'name' => 'Test User',
            'email' => '',
            'password' => 'password1234',
        ]);

        $response->assertStatus(422);
    }

    public function testRegisterMethodReturnsErrorThenNoPasswordProvided()
    {
        $response = $this->postJson('/api/register', [
            'name' => 'Test User',
            'email' => 'test1@example.dev',
            'password' => '',
        ]);

        $response->assertStatus(422);
    }

    public function testRegisterMethodReturnsErrorThenEmailAlreadyExists()
    {
        $response = $this->postJson('/api/register', [
            'name' => 'Test User',
            'email' => 'test@example.dev',
            'password' => 'password1234',
        ]);

        $response->assertStatus(422);
    }

    public function testRegisterMethodReturnsErrorThenPasswordIsTooShort()
    {
        $response = $this->postJson('/api/register', [
            'name' => 'Test User',
            'email' => 'test2@example.dev',
            'password' => 'password',
        ]);

        $response->assertStatus(422);
    }

    public function testRegisterMethodReturnsTokenForNewUser()
    {
        $response = $this->postJson('/api/register', [
            'name' => 'Test User',
            'email' => 'test2@example.dev',
            'password' => 'password1234',
        ]);

        $response->assertStatus(201)
            ->assertJsonStructure([
                'user',
                'access_token',
                'token_type',
            ]);
    }




}
